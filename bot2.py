import  config2
import logging

from  sqlighter import SQLighter
from aiogram import Bot , Dispatcher ,executor , types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


logging.basicConfig(level=logging.INFO)

#–∏–Ω–∏—Ç–∏—Ü–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token= config2.TOKEN)
dp = Dispatcher(bot)

db = SQLighter('db.db')


button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')

button1 = KeyboardButton('1')
button2 = KeyboardButton('2')
button3 = KeyboardButton('3')

markup5 = ReplyKeyboardMarkup().row(
    button1, button2, button3
).add(KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —Ä—è–¥'))

button4 = KeyboardButton('4')
button5 = KeyboardButton('5')
button6 = KeyboardButton('/geo')
markup5.row(button4, button5)
markup5.insert(button6)


markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—ÇÔ∏è', request_contact=True)
).add(
    KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é', request_location=True)
)

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=markup5)

@dp.message_handler(commands=['geo'])
async def process_hi6_command(message: types.Message):
    await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞", reply_markup=markup_request)

#–∞–∫—Ç–∏–≤–∞—Ü–∏—è
@dp.message_handler(commands=['subscribe'])
async def subscribe(massage: types.Message):
    if( not  db.subscriber_exists(massage.from_user.id)):
        db.add_subscriber(massage.from_user.id)
    else:
        db.update_subscription(massage.from_user.id, True)

        await massage.answer('–æ—Ç–ª–∏—á–Ω–æ')


@dp.message_handler(commands=['unsubscribe'])
async def subscribe(massage: types.Message):
    if( not  db.subscriber_exists(massage.from_user.id)):
        db.add_subscriber(massage.from_user.id, False)
        await massage.answer('–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–ø–∏—Å–∞–Ω—ã.')
    else:
        db.update_subscription(massage.from_user.id, False)

        await massage.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å ')

if __name__ == '__main__':
    executor.start_polling(dp,skip_updates=True)


